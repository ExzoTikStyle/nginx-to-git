stages:
  - check-diff
  - test-configs
  - sync-with-git
  - deploy-to-nginx
  - keepalived-sync

variables:
  TAG: nginx-test
  SERVER: ${CI_PROJECT_NAME}.${DOMAIN}
  VAULT_SERVER_URL: https://vault.addr.local
  DNS_SERVER: 1.1.1.1
  VAULT_AUTH_ROLE: nginx-ci
  VAULT_AUTH_PATH: jwt
  DOMAIN: addr.local
  DEPLOY_IMAGE: harbor.addr.local/library/ubuntu:20.04
  TEST_IMAGE: harbor.addr.local/library/nginx-check:1.16.1
  SYNC_COMMAND: "sudo git reset --hard origin/master && sudo git clean -df && sudo git pull && sudo nginx -t && sudo nginx -s reload"
 
.functions:
  ssh_command:
    - |
      ssh_command() {
      ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER} "cd /etc/nginx && sudo git config --global --add safe.directory /etc/nginx && sudo git remote set-url origin $CI_REPOSITORY_URL && $@"
      }
  telegram_message:
    - | 
      send_message() {
        local message_body="$1"
        local message_data=$(cat <<EOF
      {
        "chat_id": "$TG_CHAT_ID",
        "text": "$head_message $CI_PROJECT_NAME ($(dig +short $SERVER @$DNS_SERVER | grep '^[.0-9]*$')) $message_body\nTrigger time: $(TZ=Europe/Moscow date +%H:%M:%S)",
        "reply_markup": {
          "inline_keyboard": [
            [{"text": "$button_text", "url": "$CI_PIPELINE_URL"}]
          ]
        }
      }
      EOF
      )
        curl -s -d "$message_data" -H "Content-Type: application/json" -X POST https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage > /dev/null
      }
  format_text:
    - |
      format_text() {
        echo $1 | tr " " "\n" | awk '$0="/etc/nginx/"$0'
      }
  rsync_command:
    - |
      rsync_command() {
        rsync --relative --ignore-missing-args --rsync-path="sudo rsync" -e "ssh -o StrictHostKeyChecking=no" -charvz $1
      }

.runtime: &runtime
  tags:
    - $TAG
  image: $DEPLOY_IMAGE
  secrets:
     SSH_KEY: 
       vault: nginx-ci/ssh_key@infrastructure
       file: true
  before_script:
    - |
      echo "Environment setting"
      chmod 600 $(echo $SSH_KEY) && eval $(ssh-agent -s) 2>/dev/null && ssh-add $(echo $SSH_KEY) 2>/dev/null
    - !reference [.functions, ssh_command]
    - !reference [.functions, telegram_message]
    - !reference [.functions, format_text]
    - !reference [.functions, rsync_command]

test-configs:
  stage: test-configs
  <<: *runtime
  image: $TEST_IMAGE
  tags: 
    - $TAG
  allow_failure: false
  script:
    - rm -rf /etc/nginx/* && cp -r $CI_PROJECT_DIR/* /etc/nginx/
    - rsync_command "${SSH_USER}@${SERVER}:{/etc/nginx/ssl/,/opt/nginx/crypto/,/etc/nginx/crypto/,/etc/nginx/conf.d/lkkdata_upstreams.conf,/etc/nginx/conf.d/courier_*.conf,/etc/nginx/conf.d/consul_upstreams_*.conf} /" 2>&1 >/dev/null
    - find /etc/nginx -type f -exec sed -i -e 's/access_log/#&/g; s/error_log/#&/g; s/\t/    /g; s/ \+/ /g; /^[[:space:]]*#/{/^#!/!d;}; s/server_name 172\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/server_name 127.0.0.1/g' {} +
    - |
      if find /etc/nginx -type f -not -path "/etc/nginx/sites-disabled/*" -not -path "/etc/nginx/tcp-enabled/*" -not -path "/etc/nginx/conf.d-disabled/*" -not -path "/etc/nginx/tcp-disabled/*" -exec grep -HE -o "listen[[:space:]](25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):[0-9]{0,5}" {} \; | grep .; then
          echo "The use of ip in listen directive is forbidden" && exit 1
      fi
    - find /etc/nginx -type f -exec sed -i 's/listen [::]:80/#listen [::]:80/g' {} +
    - nginx -t -q
  only:
    refs:
      - master
  except:
    refs:
      - schedules

check-diff:
  stage: check-diff
  <<: *runtime
  script:
    - changes=$(ssh_command "sudo git diff --name-only")
    - untracked=$(ssh_command "sudo git ls-files . --exclude-standard --others")
    - head_message="Uncommited changes on"
    - button_text="For undo changes follow and run pipeline"
    - |
      if [ ! -z "$changes" ] && [ ! -z "$untracked" ]; then
        changes=$(format_text $changes) && untracked=$(format_text $untracked)
        echo -e "$head_message $CI_PROJECT_NAME\nUncommited files:\n$changes\nUntracked files:\n$untracked"
        send_message "\nUncommited files:\n$changes\nUntracked files:\n$untracked"
      elif [ -z "$changes" ] && [ ! -z "$untracked" ]; then
        untracked=$(format_text $untracked)
        echo -e "Untracked files on $CI_PROJECT_NAME\nUntracked files:\n$untracked"
        send_message "\nUntracked files:\n$untracked"
      elif [ ! -z "$changes" ] && [ -z "$untracked" ]; then
        changes=$(format_text $changes)
        echo -e "$head_message $CI_PROJECT_NAME\nUncommited files:\n$changes"
        send_message "\nUncommited files:\n$changes"
      elif [ -z "$changes" ] && [ -z "$untracked" ]; then
        echo "Uncommited changes not found"
      fi
  only:
    refs:
      - master
    variables:
      - $CI_PIPELINE_SOURCE == "schedule" && $CRON_CHECK == "yes"

deploy-to-nginx:
  stage: deploy-to-nginx
  <<: *runtime
  script:
    - |
      if ssh_command $SYNC_COMMAND
      then
         echo "Deploy Success"
      else 
         head_message="\u26D4\u26D4\u26D4\nNginx reload failed on"
         button_text="View failed pipeline"
         send_message
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CRON_CHECK == "yes" && $TAG != "prod"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "master"'
      when: manual
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CRON_SYNC == "yes"'
      when: never

sync-with-git:
  stage: sync-with-git
  <<: *runtime
  script:
    - export reseted_files=$(ssh_command "sudo git status --porcelain -u | sed s/^...//")
    - |
      if [ ! -z "$reseted_files" ]; 
      then
        reseted_files=$(format_text $reseted_files)
        head_message="Repository sync on"
        echo -e "$head_message \nReseted files:\n$reseted_files"
        send_message "\nReseted files:\n$reseted_files"
        ssh_command $SYNC_COMMAND
      fi
  only:
    refs:
      - master
    variables:
      - $CI_PIPELINE_SOURCE == "schedule" && $CRON_SYNC == "yes"

keepalived-sync:
  stage: keepalived-sync
  <<: *runtime
  script:
    - mkdir sync && cd sync
    - rsync_command "--exclude={'_Backup/','.git/','.gitlab-ci.yml','.gitignore'} ${SSH_USER}@${SERVER}:/etc/nginx/ ." 2>&1 >/dev/null
    - rsync_command ". ${SSH_USER}@${SECOND_NODE}.${DOMAIN}:/etc/nginx/" 2>&1 >/dev/null
    - rsync_command "${SSH_USER}@${SERVER}:/var/www/nginx/ /tmp/nginx/" 2>&1 >/dev/null
    - rsync_command "/tmp/nginx/ ${SSH_USER}@${SECOND_NODE}.${DOMAIN}:/var/www/nginx/" 2>&1 >/dev/null
    - |
      if ssh_command "sudo nginx -t && sudo nginx -s reload"
      then
         echo "Sync Success"
      else 
         head_message="\u26D4\u26D4\u26D4\nNginx reload failed on"
         button_text="View failed pipeline"
         send_message
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CRON_CHECK == "yes" && $SECOND_NODE != null'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "master" && $SECOND_NODE != null'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH == "master" && $SECOND_NODE != null'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CRON_SYNC == "yes" && $SECOND_NODE != null'
      when: on_success
